// servidor/modulo-whatsapp/src/services/whatsAppManager.js

class WhatsAppManager {
    constructor(alternativeSessionManager, messageHandler) {
        this.sessionManager = alternativeSessionManager;
        this.messageHandler = messageHandler;
    }

    // Crear nueva sesi√≥n de agente
    async createAgentSession(agentPhone, agentName) {
        console.log(`üì± Creando sesi√≥n de agente: ${agentName} (${agentPhone})`);

        try {
            // Validar formato de tel√©fono
            if (!this.messageHandler.validatePhoneNumber(agentPhone)) {
                throw new Error('Formato de tel√©fono inv√°lido');
            }

            // Crear sesi√≥n
            const result = await this.sessionManager.createSession(agentPhone, agentName);
            
            console.log(`‚úÖ Sesi√≥n creada exitosamente para ${agentName}`);
            
            return {
                ...result,
                message: 'Sesi√≥n creada. Escanea el c√≥digo QR para conectar WhatsApp.'
            };

        } catch (error) {
            console.error(`‚ùå Error creando sesi√≥n para ${agentName}:`, error.message);
            throw error;
        }
    }

    // Enviar mensaje desde sesi√≥n de agente
    async sendMessage(agentPhone, messageData) {
        console.log(`üì§ Enviando mensaje desde ${agentPhone}`);

        try {
            // Limpiar y validar contenido del mensaje
            messageData.message = this.messageHandler.cleanMessageContent(messageData.message);
            
            if (!messageData.message && !messageData.mediaUrl) {
                throw new Error('Mensaje o archivo multimedia requerido');
            }

            // Validar destinatario
            if (!this.messageHandler.validatePhoneNumber(messageData.to)) {
                throw new Error('N√∫mero de destinatario inv√°lido');
            }

            // Enviar a trav√©s del session manager
            const result = await this.sessionManager.sendMessage(agentPhone, messageData);
            
            console.log(`‚úÖ Mensaje enviado desde ${agentPhone} a ${messageData.to}`);
            
            return result;

        } catch (error) {
            console.error(`‚ùå Error enviando mensaje desde ${agentPhone}:`, error.message);
            throw error;
        }
    }

    // Cerrar sesi√≥n de agente
    async closeAgentSession(agentPhone) {
        console.log(`üõë Cerrando sesi√≥n del agente ${agentPhone}`);

        try {
            await this.sessionManager.closeSession(agentPhone);
            console.log(`‚úÖ Sesi√≥n cerrada: ${agentPhone}`);
            
            return {
                success: true,
                agentPhone,
                message: 'Sesi√≥n cerrada correctamente'
            };

        } catch (error) {
            console.error(`‚ùå Error cerrando sesi√≥n ${agentPhone}:`, error.message);
            throw error;
        }
    }

    // Obtener estado de todas las sesiones
    getSessionsStatus() {
        return this.sessionManager.getAllSessionsStatus();
    }

    // Cargar sesiones existentes (al iniciar el m√≥dulo)
    async loadExistingSessions() {
        console.log('üîÑ Cargando sesiones existentes...');

        try {
            // Aqu√≠ podr√≠as cargar sesiones desde una base de datos
            // Por ahora, iniciamos con sesiones vac√≠as
            
            console.log('‚úÖ Sesiones existentes cargadas');
            
            // Verificar conectividad con gateway
            const gatewayHealth = await this.messageHandler.checkGatewayHealth();
            if (gatewayHealth) {
                console.log('‚úÖ Conectividad con Gateway verificada');
            } else {
                console.log('‚ö†Ô∏è Gateway no disponible al iniciar');
            }

        } catch (error) {
            console.error('‚ùå Error cargando sesiones existentes:', error.message);
            // No lanzar error aqu√≠ para permitir que el m√≥dulo inicie
        }
    }

    // Procesar respuesta autom√°tica del sistema
    async processSystemResponse(responseData) {
        console.log('ü§ñ Procesando respuesta autom√°tica del sistema');

        try {
            // Validar datos de respuesta
            const processedResponse = await this.messageHandler.processOutgoingResponse(responseData);
            
            if (processedResponse.readyToSend) {
                // Enviar la respuesta
                const result = await this.sendMessage(
                    responseData.agentPhone,
                    {
                        to: responseData.to,
                        message: responseData.message,
                        mediaUrl: responseData.mediaUrl,
                        mediaType: responseData.mediaType
                    }
                );
                
                console.log('‚úÖ Respuesta autom√°tica enviada');
                return result;
            }

        } catch (error) {
            console.error('‚ùå Error procesando respuesta autom√°tica:', error.message);
            throw error;
        }
    }

    // Broadcast: enviar mensaje a m√∫ltiples destinatarios desde un agente
    async broadcastMessage(agentPhone, recipients, message, mediaData = null) {
        console.log(`üì¢ Broadcast desde ${agentPhone} a ${recipients.length} destinatarios`);

        const results = [];
        const errors = [];

        for (const recipient of recipients) {
            try {
                const result = await this.sendMessage(agentPhone, {
                    to: recipient,
                    message,
                    mediaUrl: mediaData?.mediaUrl,
                    mediaType: mediaData?.mediaType
                });

                results.push({ recipient, success: true, result });
                
                // Peque√±a pausa entre env√≠os para evitar spam
                await this.sleep(1000);

            } catch (error) {
                console.error(`‚ùå Error enviando a ${recipient}:`, error.message);
                errors.push({ recipient, error: error.message });
            }
        }

        return {
            total: recipients.length,
            sent: results.length,
            failed: errors.length,
            results,
            errors
        };
    }

    // Obtener informaci√≥n del agente por su sesi√≥n
    getAgentInfo(agentPhone) {
        const sessions = this.sessionManager.getAllSessionsStatus();
        return sessions.find(session => session.agentPhone === agentPhone);
    }

    // Verificar si un agente est√° listo para enviar mensajes
    isAgentReady(agentPhone) {
        const agentInfo = this.getAgentInfo(agentPhone);
        return agentInfo && agentInfo.status === 'ready';
    }

    // Obtener agentes listos
    getReadyAgents() {
        return this.sessionManager.getAllSessionsStatus()
            .filter(session => session.status === 'ready');
    }

    // Reiniciar sesi√≥n de agente
    async restartAgentSession(agentPhone) {
        console.log(`üîÑ Reiniciando sesi√≥n del agente ${agentPhone}`);

        try {
            const agentInfo = this.getAgentInfo(agentPhone);
            if (!agentInfo) {
                throw new Error('Agente no encontrado');
            }

            // Cerrar sesi√≥n actual
            await this.closeAgentSession(agentPhone);
            
            // Esperar un poco
            await this.sleep(2000);
            
            // Crear nueva sesi√≥n
            const result = await this.createAgentSession(agentPhone, agentInfo.agentName);
            
            console.log(`‚úÖ Sesi√≥n reiniciada para ${agentPhone}`);
            return result;

        } catch (error) {
            console.error(`‚ùå Error reiniciando sesi√≥n ${agentPhone}:`, error.message);
            throw error;
        }
    }

    // Cerrar todas las sesiones
    async closeAllSessions() {
        console.log('üõë Cerrando todas las sesiones...');
        await this.sessionManager.closeAllSessions();
    }

    // Obtener estad√≠sticas del m√≥dulo
    getModuleStats() {
        const sessions = this.sessionManager.getAllSessionsStatus();
        
        return {
            totalSessions: sessions.length,
            readySessions: sessions.filter(s => s.status === 'ready').length,
            waitingSessions: sessions.filter(s => s.status === 'waiting_qr').length,
            disconnectedSessions: sessions.filter(s => s.status === 'disconnected').length,
            totalMessagesReceived: sessions.reduce((sum, s) => sum + (s.messagesReceived || 0), 0),
            totalMessagesSent: sessions.reduce((sum, s) => sum + (s.messagesSent || 0), 0),
            messageHandler: this.messageHandler.getStats()
        };
    }

    // Helper para sleep
    sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    // Verificar salud del m√≥dulo
    async healthCheck() {
        try {
            const gatewayHealth = await this.messageHandler.checkGatewayHealth();
            const stats = this.getModuleStats();
            
            return {
                status: 'healthy',
                gatewayConnected: gatewayHealth,
                sessions: stats,
                timestamp: new Date().toISOString()
            };

        } catch (error) {
            return {
                status: 'unhealthy',
                error: error.message,
                timestamp: new Date().toISOString()
            };
        }
    }
}

module.exports = WhatsAppManager;